[{"id":"a0922cdb.06b1b","type":"tab","label":"HomeChallenge4","disabled":false,"info":""},{"id":"d4000e87.b179c","type":"csv","z":"a0922cdb.06b1b","name":"","sep":" ","hdrin":"","hdrout":"","multi":"one","ret":"\\n","temp":"","skip":"0","x":110,"y":180,"wires":[["e88fe67b.475d08","a2cf8463.0487a8"]]},{"id":"84999f63.398978","type":"file in","z":"a0922cdb.06b1b","name":"","filename":"/home/user/Desktop/traffic.csv","format":"utf8","chunk":false,"sendError":false,"x":190,"y":100,"wires":[["d4000e87.b179c"]]},{"id":"9e6f4261.64434","type":"inject","z":"a0922cdb.06b1b","name":"","topic":"","payload":"","payloadType":"date","repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":200,"y":40,"wires":[["84999f63.398978"]]},{"id":"8a4011e3.970d7","type":"delay","z":"a0922cdb.06b1b","name":"Timer","pauseType":"rate","timeout":"1","timeoutUnits":"minutes","rate":"1","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"x":670,"y":180,"wires":[["e19e2a9a.04a798"]]},{"id":"e19e2a9a.04a798","type":"mqtt out","z":"a0922cdb.06b1b","name":"MQTT Output","topic":"channels/1066773/publish/8PV3DQVPAU509E7A","qos":"0","retain":"false","broker":"12dffafa.74e04d","x":660,"y":260,"wires":[]},{"id":"e88fe67b.475d08","type":"function","z":"a0922cdb.06b1b","name":"PLC Filter","func":"//We extract all the lines of the csv of our interest related to PLC\nvar keys = Object.keys(msg.payload);\nvar length=keys.length;\nvar i=0;\nfor (i=0; i<length; i++){\n    if ((String((msg.payload[keys[i]])).includes(\"[factory/department1/section1/plc]\")||\n    String((msg.payload[keys[i]])).includes(\"[factory/department3/section3/plc]\"))&&\n    (((String(msg.payload[keys[i-2]])).includes(\"Publish\")&&msg.payload[keys[i-1]]==\"Message\")||\n    ((String(msg.payload[keys[i-3]])).includes(\"Publish\")&&msg.payload[keys[i-2]]==\"Message\"))){\n        return msg;   \n    }\n}","outputs":1,"noerr":0,"x":260,"y":160,"wires":[["9ce058a9.03d5c8"]]},{"id":"a2cf8463.0487a8","type":"function","z":"a0922cdb.06b1b","name":"HV Filter","func":"//We extract all the lines of the csv of our interest related to Hydraulic Valve\nvar keys = Object.keys(msg.payload);\nvar length=keys.length;\nvar i=0;\nfor (i=0; i<length; i++){\n    if ((String((msg.payload[keys[i]])).includes(\"[factory/department1/section1/hydraulic_valve]\")||\n    String((msg.payload[keys[i]])).includes(\"[factory/department3/section3/hydraulic_valve]\"))&&\n    (((String(msg.payload[keys[i-2]])).includes(\"Publish\")&&msg.payload[keys[i-1]]==\"Message\")||\n    ((String(msg.payload[keys[i-3]])).includes(\"Publish\")&&msg.payload[keys[i-2]]==\"Message\"))){\n        return msg;   \n    }\n}","outputs":1,"noerr":0,"x":260,"y":200,"wires":[["6c2fefb3.6bd618"]]},{"id":"6c2fefb3.6bd618","type":"function","z":"a0922cdb.06b1b","name":"MQTT msg formatter","func":"var keys = Object.keys(msg.payload);\nvar length=keys.length;\n//If the line of csv contains only one publish message\nif(!String(msg.payload[keys[length-1]]).includes(\",\")){\n    const codedmsg = Buffer.from(msg.payload[keys[length-1]], 'hex');\n    var string=codedmsg.toString('ascii');\n    var struct=JSON.parse(string);\n    return{\n     \"payload\": 'field2='+struct.value.toString(10)+'&status=MQTTPUBLISH'\n    };\n}\n//If the line of csv containes more than 1 publish message, we have to take the right message\nelse{\n    var store=[];\n    var i=0;\n    for (i=0; i<length; i++){\n        if(String(msg.payload[keys[i]]).includes(\"[\")&&\n        (((String(msg.payload[keys[i-2]])).includes(\"Publish\")&&msg.payload[keys[i-1]]==\"Message\")||\n        ((String(msg.payload[keys[i-3]])).includes(\"Publish\")&&msg.payload[keys[i-2]]==\"Message\"))){\n            store.push(msg.payload[keys[i]]);\n        }\n    }\n    for(const element of store){\n        if (String(element).includes(\"[factory/department1/section1/hydraulic_valve]\")){\n            var position = store.indexOf(element);\n            break;\n        }\n    }\n    for(const element of store){\n        if (String(element).includes(\"[factory/department3/section3/hydraulic_valve]\")){\n            var position = store.indexOf(element);\n            break;\n        }\n    }\n    var codedmsg = msg.payload[keys[length-1]];\n    var dividedmsg = codedmsg.split(\",\");\n    const codedmsg2 = Buffer.from(dividedmsg[position], 'hex');\n    var string=codedmsg2.toString('ascii');\n    var struct=JSON.parse(string);\n    return{\n     \"payload\": 'field2='+struct.value.toString(10)+'&status=MQTTPUBLISH'\n    };\n}","outputs":1,"noerr":0,"x":460,"y":200,"wires":[["8a4011e3.970d7"]]},{"id":"9ce058a9.03d5c8","type":"function","z":"a0922cdb.06b1b","name":"MQTT msg formatter","func":"var keys = Object.keys(msg.payload);\nvar length=keys.length;\n//If the line of csv contains only one publish message\nif(!String(msg.payload[keys[length-1]]).includes(\",\")){\n    const codedmsg = Buffer.from(msg.payload[keys[length-1]], 'hex');\n    var string=codedmsg.toString('ascii');\n    var struct=JSON.parse(string);\n    return{\n     \"payload\": 'field1='+struct.value.toString(10)+'&status=MQTTPUBLISH'\n    };\n}\n//If the line of csv containes more than 1 publish message, we have to take the right message\nelse{\n    var store=[];\n    var i=0;\n    for (i=0; i<length; i++){\n        if(String(msg.payload[keys[i]]).includes(\"[\")&&\n        (((String(msg.payload[keys[i-2]])).includes(\"Publish\")&&msg.payload[keys[i-1]]==\"Message\")||\n        ((String(msg.payload[keys[i-3]])).includes(\"Publish\")&&msg.payload[keys[i-2]]==\"Message\"))){\n            store.push(msg.payload[keys[i]]);\n        }\n    }\n    for(const element of store){\n        if (String(element).includes(\"[factory/department1/section1/plc]\")){\n            var position = store.indexOf(element);\n            break;\n        }\n    }\n    for(const element of store){\n        if (String(element).includes(\"[factory/department3/section3/plc]\")){\n            var position = store.indexOf(element);\n            break;\n        }\n    }\n    var codedmsg = msg.payload[keys[length-1]];\n    var dividedmsg = codedmsg.split(\",\");\n    const codedmsg2 = Buffer.from(dividedmsg[position], 'hex');\n    var string=codedmsg2.toString('ascii');\n    var struct=JSON.parse(string);\n    return{\n     \"payload\": 'field1='+struct.value.toString(10)+'&status=MQTTPUBLISH'\n    };\n}","outputs":1,"noerr":0,"x":460,"y":160,"wires":[["8a4011e3.970d7"]]},{"id":"12dffafa.74e04d","type":"mqtt-broker","z":"","name":"","broker":"mqtt.thingspeak.com","port":"1883","clientid":"","usetls":false,"compatmode":true,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""}]